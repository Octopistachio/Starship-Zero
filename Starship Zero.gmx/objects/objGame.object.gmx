<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ScreenBullshit(); //Run the game in fullscreen

fontScale = 10; //Set the font size for the Game Object

selectedStationCounter = 0;
global.walking = false;

/*Station Objects*/
global.station[0,0] = objWeapons;
global.station[1,0] = objShields;
global.station[2,0] = objCommunications;
global.station[3,0] = objNavigation;
global.station[4,0] = objPiloting;
global.station[5,0] = objJanitor;
global.station[6,0] = objResearch;
global.station[7,0] = objEngineering;

/*Names of stations*/
global.station[0,1] = "Weapons";
global.station[1,1] = "Shields";
global.station[2,1] = "Communications";
global.station[3,1] = "Navigation";
global.station[4,1] = "Piloting";
global.station[5,1] = "Janitor";
global.station[6,1] = "Research";
global.station[7,1] = "Engineering";

instance_create(global.station[selectedStationCounter,0].x, global.station[selectedStationCounter,0].y, objSelector);

with(objSelector){
    image_blend = make_colour_rgb(255, 255, 0);
}

/*Array of all the players*/
//Names of the players
global.player[0,0] = "Red";
global.player[1,0] = "Yellow";
global.player[2,0] = "Green";
global.player[3,0] = "Blue";

//Names of the objects
global.player[0,1] = objRed;
global.player[1,1] = objYellow;
global.player[2,1] = objGreen;
global.player[3,1] = objBlue;

//The player that is selecting a station currently
playerTurnCounter = -1; //The counter that chooses whose turn it is
playerTurnNameDisplayCounter = 0; //The name that displays at the top

/*The station the player has selected*/
redStation = null;
yellowStation = null;
blueStation = null;
greenStation = null;

selected = false; //A station has been selected. This variable stops the selector from moving while the player's sprite is moving


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!selected){
    /*Select a Station*/
    
    /* Press D */
    //Select a station to the right
    if keyboard_check_released(ord('D')) {
        if(selectedStationCounter &lt; array_height_2d(global.station)-1){ //If i is less than the array length
            selectedStationCounter++; //Increase selectedStationCounter by 1
        }
        else{ //If selectedStationCounter is the max array length
            selectedStationCounter = 0; //Reset selectedStationCounter
        }
        
        if(instance_exists(objSelector)){ //If the selector already exists
        
            with(objSelector){ //Destroy it
                instance_destroy();
            }
        
        }
        
        instance_create(global.station[selectedStationCounter,0].x, global.station[selectedStationCounter,0].y, objSelector); //Then create a selector
        
        with(objSelector){
            image_blend = make_colour_rgb(255, 255, 0);
        }
        
    }
    
    /* Press A */
    //Select a station to the left
    if keyboard_check_released(ord('A')){
        if(selectedStationCounter &gt; 0){ //If i is greater than 0
             selectedStationCounter--; //Decrease selectedStationCounter by 1
        }
        else{ //If selectedStationCounter equals 0
             selectedStationCounter=array_height_2d(global.station)-1; //Set selectedStationCounter to the max array length
        }
         
        if(instance_exists(objSelector)){ //If the selector already exists
         
             with(objSelector){ //Destroy it
                 instance_destroy();
             }
         
        }
         
        instance_create(global.station[selectedStationCounter,0].x, global.station[selectedStationCounter,0].y, objSelector); //Then create a selector
         
        with(objSelector){
                image_blend = make_colour_rgb(255, 255, 0); //Colour the selector yellow
        }
        
    }
    
    /* Press E */
    if keyboard_check_pressed(ord('E')){ //If E is press, select the current station
    
        /*FIX THIS CODE, IT BREAKS THE GAME*/
        if(objSelector.x == redStation.x || objSelector.x == yellowStation.x ||
           objSelector.x == greenStation.x || objSelector.x == blueStation.x){
                
           /*with(objSelector)
                image_blend = make_colour_hsv(0, 0, 0);*/
           objStation.currentColour = c_black; //if station is taken, make the selector black
            
        }
        else{
    
            selected = true;
        
            with(objSelector){
                image_blend = make_colour_rgb(255, 0, 0); //If a station is picked, make the selector red
            }
            
            global.walking = true; //Make player start walking
            
            
            /*Turn Selection*/
            if(playerTurnCounter&lt;array_height_2d(global.player)-1){
                    playerTurnCounter++;
                    playerTurnNameDisplayCounter++;
                }
            else{
            /*This should actually end the round. For now, this is filler*/
                playerTurnCounter=0;
                playerTurnNameDisplayCounter=0;
            }
                        
            /* Set the player's current station to the station that is selected */
            switch(playerTurnCounter){ 
                case 0: redStation = global.station[selectedStationCounter,0]; break; 
                case 1: yellowStation = global.station[selectedStationCounter,0]; break;
                case 2: blueStation = global.station[selectedStationCounter,0]; break;
                case 3: greenStation = global.station[selectedStationCounter,0]; break;
            }
            
            
        }
        
    }

}

PlayerWalking(); //Code that moves the player




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Text properties*/
fontScale = 1;
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fntTitle);

if(playerTurnNameDisplayCounter&lt;4)
    draw_text_transformed(view_wview/2,25,"Pick a station, " + global.player[playerTurnNameDisplayCounter,0],fontScale,fontScale,0);
else  
    draw_text_transformed(view_wview/2,25,"Turn is over",fontScale,fontScale,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
